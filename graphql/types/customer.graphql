type Customer {
  id: ID!
  storeId: String!
  store: Store!
  name: String!
  email: String!
  password: String!
  phone: String
  addresses: [Address!]!
  reviews: [ProductReview!]!
  orders: [Order!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Address {
  id: ID!
  customerId: String!
  customer: Customer!
  type: String!
  street: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
  isDefault: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductReview {
  id: ID!
  productId: String!
  product: Product!
  customerId: String!
  customer: Customer!
  rating: Int!
  title: String
  content: String!
  status: ReviewStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CustomerFilter {
  email: String
  name: String
}

input CustomerCreateInput {
  storeId: String!
  name: String!
  email: String!
  password: String!
  phone: String
}

input CustomerUpdateInput {
  name: String
  email: String
  password: String
  phone: String
}

input AddressCreateInput {
  type: String!
  street: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
  isDefault: Boolean
}

input AddressUpdateInput {
  type: String
  street: String
  city: String
  state: String
  postalCode: String
  country: String
  isDefault: Boolean
}

input ProductReviewCreateInput {
  productId: String!
  customerId: String!
  rating: Int!
  title: String
  content: String!
}

input ProductReviewUpdateInput {
  rating: Int
  title: String
  content: String
  status: ReviewStatus
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

type Query {
  customers(storeId: String!, filter: CustomerFilter): [Customer!]!
  customer(id: String!, storeId: String!): Customer
}

type Mutation {
  createCustomer(storeId: String!, input: CustomerCreateInput!): Customer!
  updateCustomer(id: String!, storeId: String!, input: CustomerUpdateInput!): Customer!
  deleteCustomer(id: String!, storeId: String!): Boolean!
  
  addCustomerAddress(customerId: String!, storeId: String!, input: AddressCreateInput!): Address!
  updateCustomerAddress(id: String!, storeId: String!, input: AddressUpdateInput!): Address!
  deleteCustomerAddress(id: String!, storeId: String!): Boolean!
}