type Brand {
  id: ID!
  storeId: String!
  store: Store!
  name: String!
  slug: String!
  description: String
  logoUrl: String
  website: String
  products: [Product!]!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Supplier {
  id: ID!
  storeId: String!
  store: Store!
  name: String!
  code: String!
  email: String
  phone: String
  address: String
  website: String
  description: String
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BrandCreateInput {
  name: String!
  description: String
  logoUrl: String
  website: String
  isActive: Boolean
}

input BrandUpdateInput {
  name: String
  description: String
  logoUrl: String
  website: String
  isActive: Boolean
}

input SupplierCreateInput {
  name: String!
  code: String!
  email: String
  phone: String
  address: String
  website: String
  description: String
  isActive: Boolean
}

input SupplierUpdateInput {
  name: String
  code: String
  email: String
  phone: String
  address: String
  website: String
  description: String
  isActive: Boolean
}

type Query {
  brands(storeId: String!): [Brand!]!
  brand(id: String!, storeId: String!): Brand
  
  suppliers(storeId: String!): [Supplier!]!
  supplier(id: String!, storeId: String!): Supplier
}

type Mutation {
  createBrand(storeId: String!, input: BrandCreateInput!): Brand!
  updateBrand(id: String!, storeId: String!, input: BrandUpdateInput!): Brand!
  deleteBrand(id: String!, storeId: String!): Boolean!
  
  createSupplier(storeId: String!, input: SupplierCreateInput!): Supplier!
  updateSupplier(id: String!, storeId: String!, input: SupplierUpdateInput!): Supplier!
  deleteSupplier(id: String!, storeId: String!): Boolean!
}