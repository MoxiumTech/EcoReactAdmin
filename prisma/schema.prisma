generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  customers  Customer[]  @relation("StoreToCustomer")
  taxonomies Taxonomy[]  @relation("StoreToTaxonomy")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  taxons    Taxon[]  @relation("BillboardToTaxon")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String // Foreign Key to Size
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String // Foreign Key to Color
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[] // Relation to Image model
  orderItems OrderItem[] // Relation to Order model
  taxons     Taxon[] // New relation to Taxon model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  fileId    String // Add this field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToCustomer", fields: [storeId], references: [id])
  name      String
  email     String
  password  String
  phone     String?
  addresses Address[] // New relation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([email, storeId])
  @@index([storeId])
}

// New Address Model
model Address {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  type       String // e.g., "home", "office", "shipping"
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([customerId])
}

model Taxonomy {
  id          String   @id @default(uuid())
  name        String
  description String?
  storeId     String
  store       Store    @relation("StoreToTaxonomy", fields: [storeId], references: [id])
  taxons      Taxon[]  @relation("TaxonomyToTaxon")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Taxon {
  id          String  @id @default(uuid())
  name        String
  description String?
  position    Int     @default(0)
  permalink   String?

  // Taxonomy relation
  taxonomyId String
  taxonomy   Taxonomy @relation("TaxonomyToTaxon", fields: [taxonomyId], references: [id], onDelete: Cascade)

  // Billboard relation
  billboard   Billboard? @relation("BillboardToTaxon", fields: [billboardId], references: [id])
  billboardId String?

  // Self-referential hierarchy
  parentId String?
  parent   Taxon?  @relation("TaxonToTaxon", fields: [parentId], references: [id])
  children Taxon[] @relation("TaxonToTaxon")

  // Product relation
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taxonomyId])
  @@index([parentId])
  @@index([billboardId])
}
