generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id              String           @id @default(uuid())
  name            String
  userId          String
  currency        String?          @default("USD")
  locale          String?          @default("en-US")
  domain          String?          @unique @db.Text
  themeSettings   Json?
  customCss       String?          @db.Text
  logoUrl         String?          @db.Text
  faviconUrl      String?          @db.Text
  billboards      Billboard[]      @relation("StoreToBillboard")
  products        Product[]        @relation("StoreToProduct")
  sizes           Size[]           @relation("StoreToSize")
  colors          Color[]          @relation("StoreToColor")
  orders          Order[]          @relation("StoreToOrder")
  customers       Customer[]       @relation("StoreToCustomer")
  taxonomies      Taxonomy[]       @relation("StoreToTaxonomy")
  stockItems      StockItem[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  brands          Brand[]          @relation("StoreToBrand")
  suppliers       Supplier[]       @relation("StoreToSupplier")
  attributes      Attribute[]      @relation("StoreToAttribute")
  attributeValues AttributeValue[] @relation("StoreToAttributeValue")
  optionTypes     OptionType[]     @relation("StoreToOptionType")
  homeLayouts     HomeLayout[]     @relation("StoreToHomeLayout")

  @@index([userId])
}

model HomeLayout {
  id          String            @id @default(uuid())
  storeId     String
  store       Store             @relation("StoreToHomeLayout", fields: [storeId], references: [id])
  isActive    Boolean           @default(false)
  name        String
  components  LayoutComponent[] @relation("LayoutToComponents")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([storeId])
}

model LayoutComponent {
  id           String     @id @default(uuid())
  layoutId     String
  layout       HomeLayout @relation("LayoutToComponents", fields: [layoutId], references: [id], onDelete: Cascade)
  type         String
  position     Int        @default(0)
  config       Json       @default("{}")
  isVisible    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([layoutId])
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  taxons    Taxon[]  @relation("BillboardToTaxon")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id               String            @id @default(uuid())
  storeId          String
  store            Store             @relation("StoreToProduct", fields: [storeId], references: [id])
  name             String
  slug             String            @unique
  description      String?
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String?
  sku              String?           @unique
  price            Decimal?
  costPrice        Decimal?
  compareAtPrice   Decimal?
  status           String            @default("draft")
  shortDescription String?
  isVisible        Boolean           @default(true)
  isPromotionable  Boolean           @default(true)
  isVirtual        Boolean           @default(false)
  hasVariants      Boolean           @default(true)
  minimumQuantity  Int               @default(1)
  maximumQuantity  Int?
  tags             String[]
  barcode          String?           @unique
  countryOfOrigin  String?
  warrantyInfo     String?
  brand            Brand?            @relation(fields: [brandId], references: [id])
  brandId          String?
  taxRate          Decimal?          @default(0)
  availableOn      DateTime?
  discontinueOn    DateTime?
  taxCategory      String?
  shippingCategory String?
  weight           Float?
  height           Float?
  width            Float?
  depth            Float?
  isMaster         Boolean           @default(true)
  variants         Variant[]
  optionTypes      OptionType[]      @relation("ProductToOptionType")
  properties       ProductProperty[]
  images           Image[]
  taxons           Taxon[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviews          ProductReview[]

  @@index([storeId])
  @@index([slug])
  @@index([brandId])
}

model OptionValue {
  id           String               @id @default(uuid())
  name         String
  presentation String
  position     Int                  @default(0)
  optionType   OptionType           @relation("OptionTypeToValues", fields: [optionTypeId], references: [id])
  optionTypeId String
  variants     VariantOptionValue[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@index([optionTypeId])
}

model VariantOptionValue {
  id            String      @id @default(uuid())
  variantId     String
  variant       Variant     @relation(fields: [variantId], references: [id])
  optionValueId String
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id])

  @@unique([variantId, optionValueId])
}

model ProductProperty {
  id        String  @id @default(uuid())
  name      String
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  position  Int     @default(0)

  @@index([productId])
}

model Variant {
  id              String               @id @default(uuid())
  name            String // Make sure this is added
  productId       String
  product         Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku             String               @unique
  price           Decimal
  costPrice       Decimal?
  compareAtPrice  Decimal?
  position        Int                  @default(0)
  trackInventory  Boolean              @default(true)
  weight          Float?
  height          Float?
  width           Float?
  depth           Float?
  optionValues    VariantOptionValue[]
  stockItems      StockItem[]
  orderItems      OrderItem[]
  images          Image[]              @relation("VariantImages")
  size            Size?                @relation(fields: [sizeId], references: [id])
  sizeId          String?
  color           Color?               @relation(fields: [colorId], references: [id])
  colorId         String?
  allowBackorder  Boolean              @default(false)
  lowStockAlert   Int? // Threshold for low stock notification
  stockMovements  StockMovement[]
  barcode         String?              @unique
  isVisible       Boolean              @default(true)
  isDefault       Boolean              @default(false)
  minimumQuantity Int                  @default(1)
  maximumQuantity Int?
  taxRate         Decimal?             @default(0)
  dimensions      Json? // Stores detailed dimensions
  customFields    Json? // For additional flexible attributes
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model StockItem {
  id             String          @id @default(uuid())
  variantId      String
  variant        Variant         @relation(fields: [variantId], references: [id], onDelete: Cascade)
  storeId        String
  store          Store           @relation(fields: [storeId], references: [id])
  count          Int             @default(0)
  stockStatus    String          @default("in_stock") // in_stock, low_stock, out_of_stock
  reserved       Int             @default(0) // Items reserved for pending orders
  backorderedQty Int             @default(0) // Items on backorder
  stockMovements StockMovement[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())

  @@unique([variantId, storeId])
  @@index([variantId])
  @@index([storeId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  status     String      @default("pending") // pending, processing, completed, cancelled
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  quantity  Int      @default(1)
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([variantId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   Variant? @relation("VariantImages", fields: [variantId], references: [id], onDelete: Cascade)
  url       String
  position  Int      @default(0)
  alt       String?
  fileId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([variantId])
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String          @id @default(uuid())
  storeId   String
  store     Store           @relation("StoreToCustomer", fields: [storeId], references: [id])
  name      String
  email     String
  password  String
  phone     String?
  addresses Address[]
  reviews   ProductReview[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@unique([email, storeId])
  @@index([storeId])
}

model Address {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  type       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([customerId])
}

model Taxonomy {
  id          String   @id @default(uuid())
  name        String
  description String?
  storeId     String
  store       Store    @relation("StoreToTaxonomy", fields: [storeId], references: [id])
  taxons      Taxon[]  @relation("TaxonomyToTaxon")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@index([storeId])
}

model Taxon {
  id          String  @id @default(uuid())
  name        String
  description String?
  position    Int     @default(0)
  permalink   String?

  taxonomyId String
  taxonomy   Taxonomy @relation("TaxonomyToTaxon", fields: [taxonomyId], references: [id], onDelete: Cascade)

  billboard   Billboard? @relation("BillboardToTaxon", fields: [billboardId], references: [id])
  billboardId String?

  parentId String?
  parent   Taxon?  @relation("TaxonToTaxon", fields: [parentId], references: [id])
  children Taxon[] @relation("TaxonToTaxon")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([taxonomyId])
  @@index([parentId])
  @@index([billboardId])
}

model StockMovement {
  id          String    @id @default(uuid())
  variantId   String
  variant     Variant   @relation(fields: [variantId], references: [id])
  stockItemId String
  stockItem   StockItem @relation(fields: [stockItemId], references: [id])
  quantity    Int
  type        String // increment, decrement, adjustment
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([variantId])
  @@index([stockItemId])
}

model Brand {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?
  website     String?
  products    Product[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model ProductReview {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  rating     Int
  title      String?
  content    String
  status     String   @default("pending") // pending, approved, rejected
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([customerId])
}

model Supplier {
  id          String   @id @default(uuid())
  storeId     String
  store       Store    @relation("StoreToSupplier", fields: [storeId], references: [id])
  name        String
  code        String   @unique
  email       String?
  phone       String?
  address     String?
  website     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Attribute {
  id         String           @id @default(uuid())
  name       String
  code       String
  type       String
  isRequired Boolean          @default(false)
  isVisible  Boolean          @default(true)
  position   Int              @default(0)
  storeId    String
  store      Store            @relation("StoreToAttribute", fields: [storeId], references: [id], onDelete: Cascade)
  values     AttributeValue[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([storeId])
}

model AttributeValue {
  id          String    @id @default(uuid())
  value       String
  position    Int       @default(0)
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  storeId     String
  store       Store     @relation("StoreToAttributeValue", fields: [storeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([attributeId])
  @@index([storeId])
}

model OptionType {
  id           String        @id @default(uuid())
  storeId      String
  productId    String
  name         String
  presentation String
  position     Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  store        Store         @relation("StoreToOptionType", fields: [storeId], references: [id], onDelete: Cascade)
  product      Product       @relation("ProductToOptionType", fields: [productId], references: [id], onDelete: Cascade)
  optionValues OptionValue[] @relation("OptionTypeToValues")

  @@index([storeId])
  @@index([productId])
}
